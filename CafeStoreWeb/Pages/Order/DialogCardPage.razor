@using CafeStoreManagement.Features;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using CafeStoreManagement.Models;
@inject HttpClient Http;
@inject Blazored.LocalStorage.ILocalStorageService sessionStorage;
@inject IJSRuntime JSRuntime;
@inject NavigationManager Navigation;
@inject NotificationService NotificationService

@if(sizes==null && outlets == null)
{
    <span class="spinner-border spinner-border-md centered" role="status" aria-hidden="true"></span>
}
else
{
    <RadzenFieldset Text="SET SIZE">
        <div class="row my-2">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Price" />
            </div>
            <div class="col-md-8">
                @if (!(sizeId == Guid.Empty && outletId == Guid.Empty))
                {
                    <RadzenNumeric style="width: 100%;" @bind-Value=@price Disabled/>
                }
                else
                {
                    <RadzenNumeric style="width: 100%;" Value="0" Disabled />

                }
                
            </div>
        </div>
        <div class="row my-2">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Qty" />
            </div>
            <div class="col-md-8">
                <RadzenNumeric style="width: 100%;" @bind-Value=@qty @oninput=@OnInput />
            </div>
        </div>
        <div class="row my-2">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Size" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown TValue="string" style="width: 100%;"
                            Data=@sizes!.DistinctBy(e=>e.Name).Select(e=>e.Name).ToList()
                            Change=@(args => OnChangeSize(args))/>
            </div>
        </div>
        <div class="row my-2">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Outlet" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown TValue="string" style="width: 100%;"
                            Data=@outlets!.DistinctBy(e=>e.Name).Select(e=>e.Name).ToList()
                            Change=@(args =>OnChangeOutlet(args))/>
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <div></div>
            <div></div>
            <RadzenButton Text="Save" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"
                      Click=@(args => AddToCart(args)) />
        </div>
    </RadzenFieldset>
}

@code {
    Guid sizeId;
    Guid outletId;
    public List<SizeModel>? sizes { get; set; }
    public List<OutletModel>? outlets { get; set; }
    double price;
    int qty;
    [Parameter]
    public ItemResponse? ChildValue { get; set; }   
    [Parameter]
    public string? Token { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Task.Run(async () =>
        {
            await Sizes();
            await Outlets();
        });

    }

    public async Task Sizes()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"/api/ItemDetail/get-item-sizes?itemId={ChildValue!.Id}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var respone = await Http.SendAsync(request);
        var body = respone.Content.ReadAsStringAsync();
        string result = body.Result;
        sizes = JsonSerializer.Deserialize<List<SizeModel>>(result, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;
    }
    public async Task Outlets()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"/api/ItemDetail/get-item-outlets?itemId={ChildValue!.Id}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var respone = await Http.SendAsync(request);
        var body = respone.Content.ReadAsStringAsync();
        string result = body.Result;
        outlets = JsonSerializer.Deserialize<List<OutletModel>>(result, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;
    }
    public async Task GetItemPricing()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "/api/ItemDetail/get-item-pricing?itemId=" + ChildValue!.Id + "&sizeId=" + sizeId + "&OutletId=" + outletId + "&qty=" + qty);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var respone = await Http.SendAsync(request);
        var body = respone.Content.ReadAsStringAsync();
        price = Double.Parse(body.Result);
    }
    async Task OnChangeSize(object size) 
    { 
        sizeId = sizes!.Where(e => e.Name == size.ToString()).Select(e => e.Id).FirstOrDefault();
        await GetItemPricing();

    }
    async Task OnChangeOutlet(object outlet)
    { 
        outletId = outlets!.Where(e => e.Name == outlet.ToString()).Select(e => e.Id).FirstOrDefault(); 
        await GetItemPricing();
    }
    async Task OnInput(ChangeEventArgs args)
    {
        if (args.Value is null)
        {
            qty = 0;
        }
        else
        {
            qty = Int32.Parse(args.Value!.ToString()!);
        }
        await GetItemPricing();
    }
    async Task AddToCart(object arg)
    {
        Order.OrderModels.Add(new Data.ReceiptModel()
        {
                ItemId = ChildValue!.Id,
                SizeId=sizeId,
                OutletId=outletId,
                Qty=qty,
                UnitPrice=price/qty,
                Total=price,
        });
        
    }
}
