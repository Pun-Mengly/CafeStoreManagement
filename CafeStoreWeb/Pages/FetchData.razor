@page "/fetchdata";
@using CafeStoreWeb.Data;
@using Microsoft.EntityFrameworkCore;
<RadzenText Text="Receipt Report" 
    TextStyle="TextStyle.H2" 
    Style="background-color:indigo; color:white;padding:12px"></RadzenText>
@if (employees is null)
{
    <span class="spinner-border spinner-border-md d-flex justify-content-center centered" role="status" aria-hidden="true"></span>

}
else
{
    <div class="rz-border-info-darker" style="padding:12px">
        <RadzenDataGrid @ref=grid AllowGrouping="true" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="10" AllowPaging="true" AllowSorting="true"
                    Data="@employees" TItem="ReceiptReportModel" ColumnWidth="160px" LogicalFilterOperator="LogicalFilterOperator.Or" Render="@OnRender"
                    HideGroupedColumn="true" GroupRowRender="OnGroupRowRender" GroupRowExpand="OnGroupRowExpand" GroupRowCollapse="OnGroupRowCollapse" Group="@OnGroup"
                    @bind-AllGroupsExpanded="@allGroupsExpanded">
            <Columns>
                <RadzenDataGridColumn TItem="ReceiptReportModel" Property="ReceiptId" Filterable="false" Title="ID" Frozen="true" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="ReceiptReportModel" Property="ItemId" Title="Item" />
                <RadzenDataGridColumn TItem="ReceiptReportModel" Property="UnitPrice" Title="Unit Price">
                    <Template Context="detail">
                        @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", detail.UnitPrice)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ReceiptReportModel" Property="Qty" Title="Qty" />
                <RadzenDataGridColumn TItem="ReceiptReportModel" Property="Total" Title="Total">
                    <Template Context="detail">
                        @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", detail.Total)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ReceiptReportModel" Property="Cashier" Title="Cashier" />
                <RadzenDataGridColumn TItem="ReceiptReportModel" Property="OrderDate" Title="Order Date" />
            </Columns>
        </RadzenDataGrid>
    </div>
}


@code {
    bool? allGroupsExpanded;
    RadzenDataGrid<ReceiptReportModel>? grid;
    List<string> receiptIds = new List<string>() 
    { 
        "46805048-22be-4dc0-9543-a3a64f38667b",
        "6da40307-d124-4952-8852-a8cc2052f08f",
        "e92ae8ef-8606-4d1c-ae50-2d40ff8599e7"
    };

    List<ReceiptReportModel>? employees=new List<ReceiptReportModel>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();     
        LoadData();
    }

    void OnRender(DataGridRenderEventArgs<ReceiptReportModel> args)
    {
        if(args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "ReceiptId", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }

    void ToggleGroups(bool? value)
    {
        allGroupsExpanded = value;
    }

    void OnGroupRowRender(GroupRowRenderEventArgs args)
    {
        if (args.FirstRender && args.Group.Data.Key == Guid.Parse("46805048-22be-4dc0-9543-a3a64f38667b") || allGroupsExpanded != null)
        {
            args.Expanded = allGroupsExpanded != null ? allGroupsExpanded : false;
        }
    }

    void OnGroupRowExpand(Group group)
    {
        Console.WriteLine($"Group row with key: {group.Data.Key} expanded");
    }

    void OnGroupRowCollapse(Group group)
    {
        Console.WriteLine($"Group row with key: {group.Data.Key} collapsed");
    }

    void OnGroup(DataGridColumnGroupEventArgs<ReceiptReportModel> args)
    {
        Console.WriteLine($"DataGrid {(args.GroupDescriptor != null ? "grouped" : "ungrouped")} by {args.Column.GetGroupProperty()}");
    }
    void LoadData()
    {
        Random rnd = new Random();

        for (int i = 0; i < 15; i++)
        {
            var qty = rnd.Next(1, 10);
            var price = rnd.NextDouble();
            employees!.Add(new ReceiptReportModel()
                {
                    ReceiptId = Guid.Parse(receiptIds[rnd.Next(receiptIds.Count)]),
                    ItemId = Guid.NewGuid(),
                    Cashier = "PUN MENGLY",
                    OrderDate = DateTime.Now,
                    Qty = qty,
                    UnitPrice = price,
                    Total = qty * price
                });
        }
    }
}
